import { CalendarGridEvent } from './CalendarGrid';
import {
  divideActiveEventsToGroups, divideToGroup, getAllEvents, getAllEventsFromActivateAccounts, getMaxNumberOfEvents,
  sortArrayOfActiveEvents
} from './Logic';

it('sortArrayOfActiveEvents should sort array correctly', () => {

  const before: CalendarGridEvent[] = [{
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 100,
      toTime: 200,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }, {
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 400,
      toTime: 500,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }, {
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 10,
      toTime: 800,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }, ]

  const after: CalendarGridEvent[] = [{
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 10,
      toTime: 800,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }, {
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 100,
      toTime: 200,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }, {
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 400,
      toTime: 500,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }]

  sortArrayOfActiveEvents(before);
  expect(before).toEqual(after);
})

it('sortArrayOfActiveEvents should throw an error for null objects inside event array', () => {

  const before: CalendarGridEvent[] = [{
    event: null,
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }, {
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 400,
      toTime: 500,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }, {
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 10,
      toTime: 800,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }, ]

  expect(() => {sortArrayOfActiveEvents(before)}).toThrowError('Incomplete data');
})

it('sortArrayOfActiveEvents should return empty array for empty array input', () => {
  const before = [];
  sortArrayOfActiveEvents(before);
  expect(before).toEqual([]);
})

it('divideToGroup should divide events to part group correctly', () => {
  const before: CalendarGridEvent[] = [{
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 100,
      toTime: 200,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }, {
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 150,
      toTime: 300,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }, {
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 500,
      toTime: 800,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }, ]

  const fromIndex = 0;
  const toIndex = 2;
  const toTime = 300;
  const partGroupArray = [];
  const fullGroupArray = [];
  const part = before;
  const full = before;
  const result = [{
    group: [{
      event: {
        id: 0,
        title: 'Title',
        location: null,
        description: 'Description',
        organizer: 'Organizer',
        creationDate: 123,
        participants: [],
        attachments: [],
        lastAppear: 123,
        fromTime: 100,
        toTime: 200,
        isNotebook: false,
        isFavorite: false,
        isFullDay: false,
        isNew: false,
        tags: [],
      },
      themeIndexColor: 0,
      account: '1',
      accountId: 0,
    }, {
      event: {
        id: 0,
        title: 'Title',
        location: null,
        description: 'Description',
        organizer: 'Organizer',
        creationDate: 123,
        participants: [],
        attachments: [],
        lastAppear: 123,
        fromTime: 150,
        toTime: 300,
        isNotebook: false,
        isFavorite: false,
        isFullDay: false,
        isNew: false,
        tags: [],
      },
      themeIndexColor: 0,
      account: '1',
      accountId: 0,
    }],
    fromTime: 100,
    toTime: 300,
  }]

  divideToGroup(before, fromIndex, toIndex, toTime, partGroupArray, fullGroupArray, part, full);
  expect(fullGroupArray).toEqual([]);
  expect(partGroupArray).toEqual(result)
})

it('divideToGroup should divide events to full group correctly', () => {
  const before: CalendarGridEvent[] = [{
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 100,
      toTime: 200,
      isNotebook: false,
      isFavorite: false,
      isFullDay: true,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }, {
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 150,
      toTime: 300,
      isNotebook: false,
      isFavorite: false,
      isFullDay: true,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }, {
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 500,
      toTime: 800,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }, ]

  const fromIndex = 0;
  const toIndex = 2;
  const toTime = 300;
  const partGroupArray = [];
  const fullGroupArray = [];
  const part = before;
  const full = before;
  const result = [{
    group: [{
      event: {
        id: 0,
        title: 'Title',
        location: null,
        description: 'Description',
        organizer: 'Organizer',
        creationDate: 123,
        participants: [],
        attachments: [],
        lastAppear: 123,
        fromTime: 100,
        toTime: 200,
        isNotebook: false,
        isFavorite: false,
        isFullDay: true,
        isNew: false,
        tags: [],
      },
      themeIndexColor: 0,
      account: '1',
      accountId: 0,
    }, {
      event: {
        id: 0,
        title: 'Title',
        location: null,
        description: 'Description',
        organizer: 'Organizer',
        creationDate: 123,
        participants: [],
        attachments: [],
        lastAppear: 123,
        fromTime: 150,
        toTime: 300,
        isNotebook: false,
        isFavorite: false,
        isFullDay: true,
        isNew: false,
        tags: [],
      },
      themeIndexColor: 0,
      account: '1',
      accountId: 0,
    }],
    fromTime: 100,
    toTime: 300,
  }]

  divideToGroup(before, fromIndex, toIndex, toTime, partGroupArray, fullGroupArray, part, full);
  expect(partGroupArray).toEqual([]);
  expect(fullGroupArray).toEqual(result)
})

it('divideActiveEventsToGroups should divide all events into correctly groups', () => {
  const before: CalendarGridEvent[] = [{
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 100,
      toTime: 200,
      isNotebook: false,
      isFavorite: false,
      isFullDay: true,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }, {
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 150,
      toTime: 300,
      isNotebook: false,
      isFavorite: false,
      isFullDay: true,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }, {
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 500,
      toTime: 800,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: '1',
    accountId: 0,
  }, ]

  const fullResult = [{
      group: [{
        event: {
          id: 0,
          title: 'Title',
          location: null,
          description: 'Description',
          organizer: 'Organizer',
          creationDate: 123,
          participants: [],
          attachments: [],
          lastAppear: 123,
          fromTime: 100,
          toTime: 200,
          isNotebook: false,
          isFavorite: false,
          isFullDay: true,
          isNew: false,
          tags: [],
        },
        themeIndexColor: 0,
        account: '1',
        accountId: 0,
      }, {
        event: {
          id: 0,
          title: 'Title',
          location: null,
          description: 'Description',
          organizer: 'Organizer',
          creationDate: 123,
          participants: [],
          attachments: [],
          lastAppear: 123,
          fromTime: 150,
          toTime: 300,
          isNotebook: false,
          isFavorite: false,
          isFullDay: true,
          isNew: false,
          tags: [],
        },
        themeIndexColor: 0,
        account: '1',
        accountId: 0,
      }],
      fromTime: 100,
      toTime: 300,
    }]

  const partResult = [{
      group: [{
        event: {
          id: 0,
          title: 'Title',
          location: null,
          description: 'Description',
          organizer: 'Organizer',
          creationDate: 123,
          participants: [],
          attachments: [],
          lastAppear: 123,
          fromTime: 500,
          toTime: 800,
          isNotebook: false,
          isFavorite: false,
          isFullDay: false,
          isNew: false,
          tags: [],
        },
        themeIndexColor: 0,
        account: '1',
        accountId: 0,
      }],
      fromTime: 500,
      toTime: 800,
    }]

  const partGroupArray = [];
  const fullGroupArray = [];
  const part = before;
  const full = before;
  divideActiveEventsToGroups(before, partGroupArray, fullGroupArray, part, full);

  expect(partGroupArray).toEqual(partResult);
  expect(fullGroupArray).toEqual(fullResult)
})

it('getAllEvents should get all events into single array one for part events and one for full events', () => {
  const DEMO_DATA = [{
    id: 0,
    account: 'Test Robot',
    isActive: true,
    calendar: [{
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 500,
      toTime: 800,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    }, {
      id: 1,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 500,
      toTime: 800,
      isNotebook: false,
      isFavorite: false,
      isFullDay: true,
      isNew: false,
      tags: [],
    }, ]
  }];

  const partResult = [{
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 500,
      toTime: 800,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: 'Test Robot',
    accountId: 0,
  }]

  const fullResult = [{
    event: {
      id: 1,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 500,
      toTime: 800,
      isNotebook: false,
      isFavorite: false,
      isFullDay: true,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: 'Test Robot',
    accountId: 0,
  }]

  const partEventsArray = [];
  const fullEventsArray = [];
  getAllEvents(DEMO_DATA[0].calendar, 0, DEMO_DATA, partEventsArray, fullEventsArray);
  expect(partEventsArray).toEqual(partResult);
  expect(fullEventsArray).toEqual(fullResult);
})

it('getAllEventsFromActivateAccounts should return sort arrays of events only from active accounts', () => {
  const DEMO_DATA = [{
    id: 0,
    account: 'Robot1',
    isActive: true,
    calendar: [{
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 500,
      toTime: 800,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    }, {
      id: 1,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 1500,
      toTime: 1800,
      isNotebook: false,
      isFavorite: false,
      isFullDay: true,
      isNew: false,
      tags: [],
    }],
  }, {
    id: 1,
    account: 'Robot2',
    isActive: false,
    calendar: [{
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 500,
      toTime: 800,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    }],
  }, {
    id: 2,
    account: 'Robot3',
    isActive: true,
    calendar: [{
      id: 0,
      title: 'Title2',
      location: null,
      description: 'Description2',
      organizer: 'Organizer2',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 2500,
      toTime: 2800,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    }],
  }, ]

  const partEventsResult = [{
    event: {
      id: 0,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 500,
      toTime: 800,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: 'Robot1',
    accountId: 0,
  }, {
    event: {
      id: 0,
      title: 'Title2',
      location: null,
      description: 'Description2',
      organizer: 'Organizer2',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 2500,
      toTime: 2800,
      isNotebook: false,
      isFavorite: false,
      isFullDay: false,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 2,
    account: 'Robot3',
    accountId: 2,
  }]

  const fullEventsResult = [{
    event: {
      id: 1,
      title: 'Title',
      location: null,
      description: 'Description',
      organizer: 'Organizer',
      creationDate: 123,
      participants: [],
      attachments: [],
      lastAppear: 123,
      fromTime: 1500,
      toTime: 1800,
      isNotebook: false,
      isFavorite: false,
      isFullDay: true,
      isNew: false,
      tags: [],
    },
    themeIndexColor: 0,
    account: 'Robot1',
    accountId: 0,
  }]

  const partGroupResult = [{
    group: [{
      event: {
        id: 0,
        title: 'Title',
        location: null,
        description: 'Description',
        organizer: 'Organizer',
        creationDate: 123,
        participants: [],
        attachments: [],
        lastAppear: 123,
        fromTime: 500,
        toTime: 800,
        isNotebook: false,
        isFavorite: false,
        isFullDay: false,
        isNew: false,
        tags: [],
      },
      themeIndexColor: 0,
      account: 'Robot1',
      accountId: 0,
    }],
    fromTime: 500,
    toTime: 800,
  }, {
    group: [{
      event: {
        id: 0,
        title: 'Title2',
        location: null,
        description: 'Description2',
        organizer: 'Organizer2',
        creationDate: 123,
        participants: [],
        attachments: [],
        lastAppear: 123,
        fromTime: 2500,
        toTime: 2800,
        isNotebook: false,
        isFavorite: false,
        isFullDay: false,
        isNew: false,
        tags: [],
      },
      themeIndexColor: 2,
      account: 'Robot3',
      accountId: 2,
    }],
    fromTime: 2500,
    toTime: 2800,
  }]

  const fullGroupResult = [{
    group: [{
      event: {
        id: 1,
        title: 'Title',
        location: null,
        description: 'Description',
        organizer: 'Organizer',
        creationDate: 123,
        participants: [],
        attachments: [],
        lastAppear: 123,
        fromTime: 1500,
        toTime: 1800,
        isNotebook: false,
        isFavorite: false,
        isFullDay: true,
        isNew: false,
        tags: [],
      },
      themeIndexColor: 0,
      account: 'Robot1',
      accountId: 0,
    }],
    fromTime: 1500,
    toTime: 1800,
  }]

  const partEventsArray = [];
  const fullEventsArray = [];
  const partGroupArray = [];
  const fullGroupArray = [];

  getAllEventsFromActivateAccounts(DEMO_DATA, partEventsArray, fullEventsArray, partGroupArray, fullGroupArray);
  expect(partEventsArray).toEqual(partEventsResult);
  expect(fullEventsArray).toEqual(fullEventsResult);
  expect(partGroupArray).toEqual(partGroupResult);
  expect(fullGroupArray).toEqual(fullGroupResult);
})

it('getMaxNumberOfEvents should return max number of events in group plus one', () => {
  const timestamp = 1500;

  const DEMO_DATA = [{
    group: [{
      event: {
        id: 1,
        title: 'Title',
        location: null,
        description: 'Description',
        organizer: 'Organizer',
        creationDate: 123,
        participants: [],
        attachments: [],
        lastAppear: 123,
        fromTime: 1500,
        toTime: 1800,
        isNotebook: false,
        isFavorite: false,
        isFullDay: true,
        isNew: false,
        tags: [],
      },
      themeIndexColor: 0,
      account: 'Robot1',
      accountId: 0,
    }],
    fromTime: 1500,
    toTime: 1800,
  }, {
    group: [{
      event: {
        id: 1,
        title: 'Title',
        location: null,
        description: 'Description',
        organizer: 'Organizer',
        creationDate: 123,
        participants: [],
        attachments: [],
        lastAppear: 123,
        fromTime: 1500,
        toTime: 2600,
        isNotebook: false,
        isFavorite: false,
        isFullDay: true,
        isNew: false,
        tags: [],
      },
      themeIndexColor: 0,
      account: 'Robot1',
      accountId: 0,
    }, {
      event: {
        id: 1,
        title: 'Title',
        location: null,
        description: 'Description',
        organizer: 'Organizer',
        creationDate: 123,
        participants: [],
        attachments: [],
        lastAppear: 123,
        fromTime: 1800,
        toTime: 3200,
        isNotebook: false,
        isFavorite: false,
        isFullDay: true,
        isNew: false,
        tags: [],
      },
      themeIndexColor: 0,
      account: 'Robot1',
      accountId: 0,
    }],
    fromTime: 1500,
    toTime: 3200,
  }, {
    group: [{
      event: {
        id: 1,
        title: 'Title',
        location: null,
        description: 'Description',
        organizer: 'Organizer',
        creationDate: 123,
        participants: [],
        attachments: [],
        lastAppear: 123,
        fromTime: 400,
        toTime: 600,
        isNotebook: false,
        isFavorite: false,
        isFullDay: true,
        isNew: false,
        tags: [],
      },
      themeIndexColor: 0,
      account: 'Robot1',
      accountId: 0,
    }, {
      event: {
        id: 1,
        title: 'Title',
        location: null,
        description: 'Description',
        organizer: 'Organizer',
        creationDate: 123,
        participants: [],
        attachments: [],
        lastAppear: 123,
        fromTime: 400,
        toTime: 1450,
        isNotebook: false,
        isFavorite: false,
        isFullDay: true,
        isNew: false,
        tags: [],
      },
      themeIndexColor: 0,
      account: 'Robot1',
      accountId: 0,
    }],
    fromTime: 400,
    toTime: 1450,
  }]

  expect(getMaxNumberOfEvents(DEMO_DATA, timestamp)).toEqual(3);
})
